/**
 * Стопка листов:
 * - новые элементы вначале списка - ввреху стопки
 * читается только верхний элемент и он исключается из списка
 * список задач:
 * 1. занесение (вставка)
 * 2. извлечение (выведение из списка)
 *
 *
 * Во внутренней работе комптютера - стэк вызоввов
 * 1. Сначала компьютер выделяет блок памяти для вызова функцииц
 * 2. Затем память используется
 *
 *
 * когда вызывается функция из другой функции, вызывающая функция приостанавливается
 * в частично завершенном состоянии, все занчения переменных этой функции остаются в памяти
 * когда выполнение greet2 будет завершено - возвращаемся к greet - продолжаем с того места, где прервались
 *
 * в основе функция greet - сверху кладутся greet2 и bye
 *
 * 1. предположим вы написали рекрсивную функцию которая бесконечно вызывает сама себя:
 * 2. компьютер выделяет память в стеке при кжадом вызове функции
 * 3. стек будет расти бесконечно
 * 4. каждой программе выдялется органиченный обьем памяти в стеке
 * 5. когда все пространство исчерпается программа завершится с ошибкой переполнения стека
 *
 * - все вызовы функции сохраняются в стеке вызовов
 * - в каждой рекурсивной функции должно быть два случая: базовый и рекрсивный
 */


public class Stack {


    public static String greet(String name){

        System.out.println(greet2(name));
        System.out.println(bye(name));
        return "hello " + name;


    }

    public static String greet2(String name){
        return "greeting ready to say " + name;

    }

    public static String bye(String name){
        return "bye " + name;

    }


    public static int factorial(int x){
        if(x==1){
            return x;
        }else{
            return x * factorial(x-1);
            // 3 * 2 * 1 (return)
        }

    }


    public static void main(String[] args) {
        System.out.println(greet("Petya"));
        System.out.println(factorial(3));
    }

}
