import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;

/**
 *
 *
 * sout+tab
 * psvm+tab
 память компьютера - шкаф со множеством якщиков
 у каждого ящика свой адрес
 каждый раз у компьютера запрашиваю место в памьяти - выдает адрес сохранения значения.

 Если нужно сохранить несколько значений: 1) массив 2) список


 ---------------------МАССИВ-------СПИСОК---------
 ЧТЕНИЕ----------------О(1)---------O(n)----------
 ВСТАВКА---------------O(n)---------O(1)----------
 УДАЛЕНИЕ--------------O(n)---------O(1)----------

 O(n) - линейное время
 O(1) - постоянное время

 1. МАССИВ
 + ПРЫГАТЬ ПО МАССИВУ ТУДА-СЮДА
 + ПРОИЗВОЛЬНЫЙ ДОСТУП (СКОРОСТЬ ЧТЕНИЯ)
 - УДАЛЕНИЕ
 - ВСТАВКА
 + ЗАРАНЕЕ ИЗВЕСТЕН АДРЕС КАЖДОГО ЭЛЕМЕНТА: 00 01 02 03 04


 - все задачи рядом с друг другом (неприрывно): 1. обед 2. тренировка 3. чай
 - 4ий ящик занят - там лежат чужие вещи
 - пошли 3е в кино, пришел 4ый- ищем новый свободный ряд (запросить у компьютера другой блок памяти)
 - бронирование мест:
 -- список из 3 задач, запрашиваю 10 позиций у компютера. тогда можно добавить 10 задач
 --- лишнее место может не понадобиться, память используется неэффективно, никто другой использовать не может
 ---если в список добавить больше 10 задач - перемещаться все же придется


 2. СВЯЗАННЫЙ СПИСОК
 + ДАННЫЕ ЧИТАЮТСЯ ПОСЛЕДОВАТЕЛЬНО
 + УДАЛЕНИЕ
 + ПОСЛЕДОВАТЕЛЬНЫЙ ДОСТУП
 + ВСТАВКА
 + НА ПРАКТИКЕ СОХРАНЯЮТСЯ ССІЛКИ ТОЛЬКО НА ПЕРВІЙ И ПОСЛЕДНИЙ ЄЛЕМЕНТІ СВЯЗАННОГО СПИСКА - время удаления O(1)
 - элементы могут размещаться где угодно в памяти  1. обед 2. пустой элемент 3. чай 4. пустой элемент 5. тренировка.
 в каждом элементе хранится адрес следующего элемента  - набор произвольных адресов обьединяется в цепочку.
 - 1) первый эелемент по адресу 123 - второй элемент по адресу 847 2) тертий элемент по адресу 995...
 - адрес нового элемента хранится в пердыдущем.
 - ладно, тогда садимся на свободные места и смотрим кино





 */

public class Arrays {

    public static void main(String[] args) {
        ArrayList<String> cars = new ArrayList<String>();
        cars.add("Volvo");
        cars.add("BMW");
        cars.add("Ford");
        cars.add("Mazda");
        System.out.println(cars);
        System.out.println(cars.get(0));



        LinkedList<String> cars2 = new LinkedList<String>();
        cars2.add("Volvo2");
        cars2.add("BMW2");
        cars2.add("Ford2");
        cars2.add("Mazda2");
        System.out.println(cars2);
        System.out.println(cars2.get(0));


        HashMap<String, String> capitalCities = new HashMap<String, String>();

        // Add keys and values (Country, City)
        capitalCities.put("England", "London");
        capitalCities.put("Germany", "Berlin");
        capitalCities.put("Norway", "Oslo");
        capitalCities.put("USA", "Washington DC");
        System.out.println(capitalCities);
        System.out.println(capitalCities.get("England"));
    }
}
